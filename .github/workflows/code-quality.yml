name: Code Quality Checks

permissions:
  contents: write

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.java'
      - '**/*.go'
      - '**/*.cpp'
      - '**/*.c'
      - '.github/workflows/code-quality.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.java'
      - '**/*.go'
      - '**/*.cpp'
      - '**/*.c'
  workflow_dispatch:

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full clone for better analysis

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/sonar-project.properties') }}
          restore-keys: |
            ${{ runner.os }}-sonar-

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort mypy bandit

      - name: Run flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

      - name: Run pylint
        run: pylint **/*.py --exit-zero
        continue-on-error: true

      - name: Check code formatting with black
        run: black --check .
        continue-on-error: true

      - name: Check import sorting with isort
        run: isort --check-only .
        continue-on-error: true

      - name: Run mypy type checking
        run: mypy . --install-types --non-interactive
        continue-on-error: true

      - name: Run bandit security checks
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

  code-complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install complexity tools
        run: |
          pip install radon lizard

      - name: Run radon cyclomatic complexity
        run: radon cc . -a -nb
        continue-on-error: true

      - name: Run radon maintainability index
        run: radon mi . -nb
        continue-on-error: true

      - name: Run lizard complexity analysis
        run: lizard . -o lizard-report.html
        continue-on-error: true

      - name: Upload complexity report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: complexity-report
          path: lizard-report.html
          retention-days: 30
