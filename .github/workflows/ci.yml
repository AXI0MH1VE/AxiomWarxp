name: AxiomWarxp CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
jobs:
  validate:
    name: Genesis Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.8'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f requirements_fixed.txt ]; then
            pip install -r requirements_fixed.txt
          fi
      - name: Validate Genesis Refractor
        run: |
          python ARTIFACTS/genesis_refractor.py
          echo "BOOT_STATE: VERIFIED; GITHUB_AUTH: TRUE" > boot_check.txt
          python ARTIFACTS/genesis_refractor.py | grep -q "BOOT_STATE: VERIFIED" || exit 1
  build-rust:
    name: Build Rust Components
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build Rust components
        run: |
          if [ -f Cargo.toml ]; then
            cargo build --release
          else
            echo "Cargo.toml not found, skipping Rust build"
          fi
  build-python:
    name: Build Python Components
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f requirements_fixed.txt ]; then
            pip install -r requirements_fixed.txt
          fi
      - name: Build Python package
        run: |
          if [ -f setup.py ]; then
            python setup.py build
          else
            echo "setup.py not found, skipping Python build"
          fi
  build-web:
    name: Build Web UI Components
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Build web components
        run: |
          if [ -f package.json ]; then
            npm install
            npm run build
          else
            echo "package.json not found, skipping web build"
          fi
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-rust, build-python, build-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f requirements_fixed.txt ]; then
            pip install -r requirements_fixed.txt
          fi
      - name: Run integration tests
        run: |
          if [ -f ARTIFACTS/test_integration.py ]; then
            python ARTIFACTS/test_integration.py
          else
            echo "Integration tests not found, skipping"
          fi
  deploy-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [test-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Validate deployment configuration
        run: |
          # Check Docker configurations
          if [ -f DevDollz/docker-compose.yml ] && command -v docker-compose &> /dev/null; then
            docker-compose -f DevDollz/docker-compose.yml config -q
            echo "Docker compose validation passed"
          else
            echo "Docker compose file not found or docker-compose not installed, skipping"
          fi
          # Validate Terraform (if present)
          if [ -f "TranscendentAI/deployment/terraform/main.tf" ] && command -v terraform &> /dev/null; then
            cd TranscendentAI/deployment/terraform
            terraform init -backend=false
            terraform validate
            echo "Terraform validation passed"
          else
            echo "Terraform not found or not installed, skipping"
          fi
          # Validate Kubernetes manifests (syntax only, requires cluster access)
          if [ -f "TranscendentAI/deployment/k8s/deployment.yaml" ]; then
            echo "Kubernetes manifests found, but validation requires cluster access, skipping"
          else
            echo "Kubernetes manifests not found, skipping"
          fi
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set release tag
        id: set_tag
        run: |
          TAG="v$(date +%Y%m%d.%H%M%S)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
      - name: Generate release notes
        run: |
          echo "## Release $(date +%Y%m%d)" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          git log --oneline --since="last week" >> release_notes.md
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_tag.outputs.tag }}
          name: AxiomWarxp Release ${{ steps.set_tag.outputs.date }}
          body_path: release_notes.md
          draft: false
          prerelease: false
