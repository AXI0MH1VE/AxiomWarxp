name: AxiomWarxp CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  validate:
    name: Genesis Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate Genesis Refractor
        run: |
          python ARTIFACTS/genesis_refractor.py
          echo "BOOT_STATE: VERIFIED; GITHUB_AUTH: TRUE" > boot_check.txt
          python ARTIFACTS/genesis_refractor.py | grep -q "BOOT_STATE: VERIFIED" || exit 1

  build-rust:
    name: Build Rust Components
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Build AgentMatrix
        run: |
          cd AgentMatrix
          cargo build --release --verbose

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: agent-matrix-binary
          path: AgentMatrix/target/release/agent_matrix

  build-python:
    name: Build Python Components
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Compile Python modules
        run: python -m compileall . -q

      - name: Run Python tests
        run: python -m pytest --tb=short -q

  build-web-ui:
    name: Build Web UI Components
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            axiom-command-center/package-lock.json
            axiom-terminal/package-lock.json

      - name: Build Axiom Command Center
        run: |
          cd axiom-command-center
          npm ci
          npm run build

      - name: Build Axiom Terminal
        run: |
          cd axiom-terminal
          npm ci
          npm run tauri build --no-bundle

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [validate, build-rust, build-python, build-web-ui]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download Rust binary
        uses: actions/download-artifact@v3
        with:
          name: agent-matrix-binary
          path: AgentMatrix/target/release/

      - name: Make binary executable
        run: chmod +x AgentMatrix/target/release/agent_matrix

      - name: Run DevDollz integration tests
        run: |
          cd DevDollz
          python -m pytest tests/ -v

      - name: Run TranscendentAI tests
        run: |
          cd TranscendentAI
          python -m pytest tests/ -v

      - name: Validate A-DAG ledger
        run: |
          python -c "
          import json
          with open('ARTIFACTS/ledger_schema.json', 'r') as f:
              schema = json.load(f)
          print('A-DAG schema validated')
          "

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [test-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate deployment configuration
        run: |
          # Check Docker configurations
          docker-compose -f DevDollz/docker-compose.yml config -q
          echo "Docker compose validation passed"

          # Validate Terraform (if present)
          if [ -f "TranscendentAI/deployment/terraform/main.tf" ]; then
            cd TranscendentAI/deployment/terraform
            terraform init -backend=false
            terraform validate
            echo "Terraform validation passed"
          fi

          # Validate Kubernetes manifests
          if [ -f "TranscendentAI/deployment/k8s/deployment.yaml" ]; then
            kubectl --dry-run=client apply -f TranscendentAI/deployment/k8s/
            echo "Kubernetes validation passed"
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        run: |
          echo "## Release $(date +%Y%m%d)" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          git log --oneline --since="last week" >> release_notes.md

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v$(date +%Y%m%d.%H%M%S)
          release_name: AxiomWarxp Release $(date +%Y%m%d)
          body_path: release_notes.md
          draft: false
          prerelease: false