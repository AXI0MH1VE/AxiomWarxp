name: Deterministic Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - 'tests/**'
      - 'requirements*.txt'
      - 'package.json'
      - '.github/workflows/deterministic-testing.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - 'tests/**'
      - 'requirements*.txt'
      - 'package.json'
  workflow_dispatch:

env:
  PYTHONHASHSEED: 0
  DETERMINISTIC_TEST_MODE: 'true'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-xdist pytest-cov pytest-timeout pytest-randomly
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Run unit tests with deterministic settings
        run: |
          pytest tests/unit/ \
            -v \
            --cov=. \
            --cov-report=xml \
            --cov-report=term \
            --junitxml=junit-${{ matrix.python-version }}.xml \
            --randomly-seed=42 \
            --randomly-dont-reorganise \
            -n auto \
            --timeout=300
        env:
          PYTHONHASHSEED: 42

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit-${{ matrix.python-version }}
          path: junit-${{ matrix.python-version }}.xml
          retention-days: 30

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: coverage.xml
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-integration-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-timeout
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            -v \
            --cov=. \
            --cov-append \
            --cov-report=xml \
            --junitxml=junit-integration.xml \
            --timeout=600
        env:
          PYTHONHASHSEED: 42

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-integration
          path: junit-integration.xml
          retention-days: 30

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-e2e-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-e2e-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest selenium pytest-timeout
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ \
            -v \
            --junitxml=junit-e2e.xml \
            --timeout=900
        env:
          PYTHONHASHSEED: 42

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-e2e
          path: junit-e2e.xml
          retention-days: 30

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v5
        with:
          pattern: test-results-*
          path: test-results/

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: 'test-results/**/*.xml'
          reporter: java-junit
          fail-on-error: false

  test-consistency:
    name: Verify Test Determinism
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-consistency-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-consistency-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-randomly
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Run tests multiple times to verify determinism
        run: |
          echo "Run 1:"
          pytest tests/ --randomly-seed=42 --randomly-dont-reorganise -v > run1.log 2>&1 || true
          
          echo "Run 2:"
          pytest tests/ --randomly-seed=42 --randomly-dont-reorganise -v > run2.log 2>&1 || true
          
          echo "Comparing results..."
          diff run1.log run2.log && echo "Tests are deterministic!" || echo "Warning: Tests may not be deterministic"
        env:
          PYTHONHASHSEED: 42

      - name: Upload consistency check logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: consistency-check-logs
          path: |
            run1.log
            run2.log
          retention-days: 30
